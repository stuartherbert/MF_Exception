<?xml version="1.0" encoding="UTF-8"?>
<!-- build file for phing -->
<project default="help" basedir=".">
  <!-- Human-readable info about our component -->
  <property file="build.properties" />

  <property name="project.version"   value="${project.majorVersion}.${project.minorVersion}.${project.patchLevel}" />
  <property name="project.apiversion" value="${project.majorVersion}.${project.minorVersion}" />

  <!-- Paths to the directories that we work with -->
  <property name="project.srcdir"    value="${project.basedir}/src"    override="true" />
  <property name="project.testsdir"  value="${project.basedir}/tests"  override="true" />

  <property name="project.reviewdir" value="${project.basedir}/review" override="true" />
  <property name="project.logsdir"   value="${project.reviewdir}/logs" override="true" />
  <property name="project.docsdir"   value="${project.reviewdir}/docs"   override="true" />

  <property name="project.builddir"  value="${project.basedir}/build"  override="true" />
  <property name="project.pkgdir"  value="${project.builddir}/${project.name}-${project.version}"  override="true" />
  <property name="project.distdir" value="${project.basedir}/dist" />

  <property name="project.tarfilename"   value="${project.name}-${project.version}.tgz" />
  <property name="project.tarfile"   value="${project.distdir}/${project.tarfilename}" />

  <fileset dir="${project.srcdir}" id="srcfiles">
    <include name="**/**"/>
  </fileset>

  <!-- Tell the user what this build file supports -->
  <target name="help">
    <echo message="${project.name} ${project.version}: build.xml targets:" />
    <echo message="" />
    <echo message="lint" />
    <echo message="  Check the PHP files for syntax errors" />
    <echo message="test" />
    <echo message="  Run the component's PHPUnit tests" />
    <echo message="code-review" />
    <echo message="  Run code quality tests (pdepend, phpmd, phpcpd, phpcs)" />
    <echo message="pear-package" />
    <echo message="  Create a PEAR-compatible package" />
    <echo message="install.local" />
    <echo message="  Install this component from source" />
    <echo message="  You must be root to run this target!!" />
    <echo message="git-tag" />
    <echo message="  Tag a new release in git and push to github" />
    <echo message="publish" />
    <echo message="  Publish the pear package onto the channel server" />
    <echo message="clean" />
    <echo message="  Remove all temporary folders created by this build file" />
  </target>

  <!-- Run PHP lint on all of the source code -->
  <target name="lint">
    <phplint>
      <fileset dir="${project.srcdir}">
        <include name="**/*.php" />
      </fileset>
    </phplint>
  </target>

  <!-- Run the unit tests for this module -->
  <target name="test" depends="lint">
    <delete dir="${project.reviewdir}/code-coverage" />
    <mkdir dir="${project.reviewdir}/code-coverage" />
    <exec command="phpunit --bootstrap=${project.testsdir}/bootstrap.php --coverage-html ${project.reviewdir}/code-coverage ${project.testsdir}" checkreturn="true" logoutput="true"/>
    <echo/>
    <echo>The code coverage report is in ${project.reviewdir}/code-coverage</echo>
  </target>

  <!-- Run the code review quality tests -->
  <target name="code-review" depends="pdepend, phpmd, phpcpd, phpcs" />

  <target name="pdepend">
    <mkdir dir="${project.reviewdir}/logs" />
    <mkdir dir="${project.reviewdir}/pdepend" />
    <exec command="pdepend --jdepend-xml=${project.reviewdir}/logs/jdepend.xml --jdepend-chart=${project.reviewdir}/pdepend/dependencies.svg --overview-pyramid=${project.reviewdir}/pdepend/overview-pyramid.svg ${project.srcdir}" />
  </target>

  <!-- Generate package docs -->
  <target name="phpdoc">
    <delete dir="${project.docsdir}" />
    <mkdir dir="${project.docsdir}" />
    <exec command="phpdoc -d ${project.srcdir} -t ${project.docsdir} "/>
  </target>

  <!-- Check code for code smells -->
  <target name="phpmd">
    <mkdir dir="${project.reviewdir}/logs" />
    <exec command="phpmd ${project.srcdir} xml codesize,design,naming,unusedcode --reportfile=${project.logsdir}/pmd.xml" />
  </target>

  <target name="phpcpd">
    <exec command="phpcpd --log-pmd ${project.logsdir}/pmd-cpd.xml ${project.srcdir}" />
  </target>

  <!-- Check the code for style violations -->
  <target name="phpcs">
    <exec command="phpcs --report=checkstyle --report-file=${project.logsdir}/checkstyle.xml --standard=Sebastian --extensions=php ${project.srcdir}" />
  </target>

  <!-- Build the code-browser files -->
  <target name="phpcb">
    <delete dir="${project.reviewdir}/code-browser" />
    <mkdir dir="${project.reviewdir}/code-browser" />
    <exec command="phpcb --log ${project.logsdir} --source ${project.srcdir} --output ${project.reviewdir}/code-browser" />
  </target>

  <!-- Create the PEAR package, ready for release -->
  <target name="pear-package">
    <echo>Building release directory</echo>
    <delete dir="${project.builddir}" />
    <mkdir dir="${project.pkgdir}" />
    <copy todir="${project.pkgdir}">
      <fileset refid="srcfiles"/>
    </copy>
    <copy todir="${project.builddir}">
      <fileset dir=".">
        <include name="package.xml" />
      </fileset>
    </copy>

    <exec command="php tools/populatepackage.php build.properties ${project.builddir}/package.xml ${project.pkgdir}" />

    <echo>Creating ${project.tarfile} PEAR package</echo>

    <mkdir dir="${project.distdir}" />
    <delete file="${project.tarfile}" />
    <tar destfile="${project.tarfile}" compression="gzip">
      <fileset dir="${project.builddir}">
        <include name="*" />
      </fileset>
    </tar>
    <echo>Your PEAR package is in ${project.tarfile}</echo>
  </target>

  <!-- Install the code -->
  <target name="install.local" depends="pear-package">
    <exec command="pear install -f -a ${project.tarfile}" checkreturn="true" logoutput="true" />
  </target>

  <!-- Tag this release -->
  <target name="git-tag">
    <exec command="git tag -a 'Release-${project.version}' -m 'Tagged Release ${project-version}'" checkreturn="true" logoutput="true" />
    <exec command="git push --tags origin master" checkreturn="true" logoutput="true" />
  </target>

  <!-- Publish the distribution files for download -->
  <target name="publish" depends="pear-package">
    <exec command="scp ${project.tarfile} stuart@pear.methodosity.com:incoming-packages/" checkreturn="true" logoutput="true"/>
    <exec command="ssh stuart@pear.methodosity.com pirum add /var/www/pear.methodosity.com incoming-packages/${project.tarfilename}" checkreturn="true" logoutput="true" />
  </target>

  <!-- Clean up the mess -->
  <target name="clean">
    <delete dir="${project.builddir}" />
    <delete dir="${project.distdir}" />
    <delete dir="${project.reviewdir}" />
  </target>
</project>
<!-- vim: set tabstop=2 shiftwidth=2 expandtab: -->
